


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Isaac Feldman and Mina Gawargious
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/9/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal) 
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         
   46 00000000 01312D00 
                       TotalDelay
                               EQU              20000000    ;I found these valu
                                                            es through calculat
                                                            ions of how many cl
                                                            ock cycles instruct
                                                            ions take to execut
                                                            e. The LED should i
                                                            nitially
   47 00000000         ;be on for 25 milliseconds for 20% duty cycle, and when 
                       I tested it on the logic analyzer, it came out to around
                        25.6 milliseconds, so the calculations were pretty clos
                       e.
   48 00000000         
   49 00000000         ;Note: I am using R2 as the multiple for the delay that 
                       the LED is on. It starts at 1, so the delay is 499996*1.
                        When PE1 is pressed, it should change to 
   50 00000000         ;2, so the delay is now 2*499996 = 999992 (40% duty cycl
                       e), and so on. This way, when R2 is incremented, it will
                        become R2 = (R2 + 1 )%6. If it changes to 5%6 = 5,
   51 00000000         ;the duty cycle will be 100%. Then it will change to 6%6
                        = 0, and the LED will be off.
   52 00000000         
   53 00000000         
   54 00000000                 IMPORT           TExaS_Init
   55 00000000                 THUMB
   56 00000000                 AREA             DATA, ALIGN=2



ARM Macro Assembler    Page 3 


   57 00000000         ;global variables go here
   58 00000000         
   59 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   60 00000000                 THUMB
   61 00000000                 EXPORT           Start
   62 00000000         Start
   63 00000000         ; TExaS_Init sets bus clock at 80 MHz
   64 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   65 00000004         ; Initialization goes here
   66 00000004         
   67 00000004         ;So, I will use Port E Pins 0 and 1, and Port F pin 4. S
                       ince I am not using Port F pin 0, I need not unlock anyt
                       hing.
   68 00000004         
   69 00000004         ;Start clocks for ports E and F
   70 00000004 4842            LDR              R0, =SYSCTL_RCGCGPIO_R
   71 00000006 7801            LDRB             R1, [R0]
   72 00000008 F041 0130       ORR              R1, R1, #0x30 ;SYSCTL_RCGCGPIO_
                                                            R = xxFEDCBA, so to
                                                             enable E and F, I 
                                                            need to ORR it with
                                                             0x30.
   73 0000000C 7001            STRB             R1, [R0]
   74 0000000E BF00            NOP
   75 00000010 BF00            NOP
   76 00000012 BF00            NOP
   77 00000014 BF00            NOP
   78 00000016         
   79 00000016         ;If I need to unlock port F, put it here, but since I am
                        using switch 1 and not switch 2 (which is pin 0), I do 
                       not think an unlock is necessary.
   80 00000016         
   81 00000016         ;Now, I need to digitally enable all the pins I am using
                       .
   82 00000016         
   83 00000016 483F            LDR              R0, =GPIO_PORTE_DEN_R
   84 00000018 7801            LDRB             R1, [R0]
   85 0000001A F041 0103       ORR              R1, R1, #0x03 ;Digitally enable
                                                             pins 0 and 1.
   86 0000001E 7001            STRB             R1, [R0]
   87 00000020         
   88 00000020 483D            LDR              R0, =GPIO_PORTF_DEN_R
   89 00000022 7801            LDRB             R1, [R0]
   90 00000024 F041 0110       ORR              R1, R1, #0x10 ;Digitally enable
                                                             pin 4.
   91 00000028 7001            STRB             R1, [R0]
   92 0000002A         
   93 0000002A         ;Now that the pins I am using are digitally enabled, I a
                       lso need to set the directions of each of the pins as ei
                       ther input or output.
   94 0000002A         
   95 0000002A         ;PE1 and PF4 are both inputs (0), and PE0 is an output (
                       1). Remember that for some reason, 0 is input and 1 is o
                       utput.
   96 0000002A         
   97 0000002A 483C            LDR              R0, =GPIO_PORTE_DIR_R
   98 0000002C 7801            LDRB             R1, [R0]



ARM Macro Assembler    Page 4 


   99 0000002E F041 0101       ORR              R1, R1, #0x01 ;PE0 is an output
                                                             (1).
  100 00000032 F001 01FD       AND              R1, R1, #0xFD ;PE1 is input (DI
                                                            R = 76543210)
  101 00000036 7001            STRB             R1, [R0]
  102 00000038         
  103 00000038         ;Now Port F
  104 00000038         
  105 00000038 4839            LDR              R0, =GPIO_PORTF_DIR_R
  106 0000003A 7801            LDRB             R1, [R0]
  107 0000003C F001 01EF       AND              R1, R1, #0xEF ;Set pin 4 to inp
                                                            ut (0)
  108 00000040 7001            STRB             R1, [R0]
  109 00000042         
  110 00000042         ;Now, I need to disable alternate funtions.
  111 00000042         
  112 00000042 4838            LDR              R0, =GPIO_PORTE_AFSEL_R ;R0 = a
                                                            ddress of Alternate
                                                             Function SELect re
                                                            gister.
  113 00000044 7801            LDRB             R1, [R0]
  114 00000046 F001 01FC       AND              R1, #0xFC   ;Turn off alternate
                                                             functions for pins
                                                             0 and 1 for portE.
                                                            
  115 0000004A 7001            STRB             R1, [R0]
  116 0000004C         
  117 0000004C         ;Now to disable Port F's alternate functions.
  118 0000004C         
  119 0000004C 4836            LDR              R0, =GPIO_PORTF_AFSEL_R
  120 0000004E 7801            LDRB             R1, [R0]
  121 00000050 F001 01EF       AND              R1, #0xEF   ;I am only using pi
                                                            n 4, so I need to d
                                                            isable alternate fu
                                                            nctions just for pi
                                                            n 4.
  122 00000054 7001            STRB             R1, [R0]
  123 00000056         
  124 00000056         ;Now, I need to enable the pull-up resistor for the nega
                       tive-logic switch in Port F
  125 00000056         
  126 00000056 4835            LDR              R0, =GPIO_PORTF_PUR_R
  127 00000058 7801            LDRB             R1, [R0]
  128 0000005A F041 0110       ORR              R1, #0x10   ;I am using switch 
                                                            1 on pin 4, so I ne
                                                            ed to enable its pu
                                                            ll-up resistor.
  129 0000005E 7001            STRB             R1, [R0]
  130 00000060         
  131 00000060 F04F 0214       MOV              R2, #20     ;LED should start a
                                                            t 20% duty cycle.
  132 00000064 F04F 0308       MOV              R3, #8      ;Frequency is 8 at 
                                                            first Hz.
  133 00000068 F04F 0400       MOV              R4, #0      ;The button is not 
                                                            initially pressed.
  134 0000006C         
  135 0000006C B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts



ARM Macro Assembler    Page 5 


  136 0000006E         
  137 0000006E         ;What i want: R2 = duty cycle in percentage between 20 a
                       nd 100. R3 = frequency in Hz. R4 = previous state of but
                       ton (PE1).
  138 0000006E         
  139 0000006E         loop
  140 0000006E         ; main engine goes here
  141 0000006E         
  142 0000006E         ;Initially turn the LED on.
  143 0000006E         
  144 0000006E F000 F803       BL               toggleLED
  145 00000072         
  146 00000072         ;The 20% duty cycle corresponds to a delay of 499996 (su
                       btracting 1 from this value a bunch of times until it is
                        0 makes the LED on for 20% of the duty cycle).
  147 00000072         ;When PE1 is pressed AND released, I want R2 = (R2 + 1)%
                       6, so it goes from 20% to 40 to 60 to 80 to 100 to 0.
  148 00000072         
  149 00000072         ;For an 8Hz LED cycle with a 80MHz microcontroller clock
                       , I need 10MHz between setting the LED on the first time
                        and setting it on the second time.
  150 00000072         
  151 00000072         ;With a 20% duty cycle, I wait 2 million cycles while it
                       's on, then at the end of those 2 million cycles, the re
                       st of the 8 million, it is off.
  152 00000072         
  153 00000072         ;This is where things get a bit tricky. R2 is incremente
                       d when the switch is pressed AND released. So, what I'm 
                       thinking is this:
  154 00000072         ;Have a register, R4, that holds either 0 or 1. When the
                        switch is pressed, put 1 into R4. Then, if the register
                        holds a value of 1, and the switch holds
  155 00000072         ;a value of 0, then I know it's previous state was 1, an
                       d it's current state is 0, so the button has been releas
                       ed. Increment R2, and reset R4 back to 0.
  156 00000072         
  157 00000072 F000 F833       BL               checkSwitchState
  158 00000076         
  159 00000076 E7FA            B                loop
  160 00000078         
  161 00000078                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  162 00000078         
  163 00000078         ;_______________________________________________________
                       ________________________________________________________
                       ________________________________________________________
                       _
  164 00000078         
  165 00000078         toggleLED                            ;Subroutine to togg
                                                            le the LED on or of
                                                            f, according to the
                                                             duty cycle. Instea
                                                            d of putting this i
                                                            nside the loop, I p
                                                            ut it as its own se
                                                            parate
  166 00000078         ;subroutine so I can call it for the breathing LED part.
                       



ARM Macro Assembler    Page 6 


  167 00000078         
  168 00000078 B507            PUSH             {R0, R1, R2, LR}
  169 0000007A         
  170 0000007A 2A00            CMP              R2, #0
  171 0000007C D011            BEQ              turnLEDOff  ;When R2 = 0, the L
                                                            ED should NEVER tur
                                                            n on.
  172 0000007E         
  173 0000007E         turnLEDOn
  174 0000007E 482C            LDR              R0, =GPIO_PORTE_DATA_R
  175 00000080 7801            LDRB             R1, [R0]
  176 00000082 F041 0101       ORR              R1, R1, #0x01 ;LED output on.
  177 00000086 7001            STRB             R1, [R0]
  178 00000088         
  179 00000088         ;The number I should count down from is 20000000 (totalD
                       elay) divided by the frequency for the total clock cycle
                       s between turning the LED on once and turning it
  180 00000088         ;on another time. The tim it is on is then that value mu
                       ltiplied by R2 divided by 100.
  181 00000088         
  182 00000088 482A            LDR              R0, =TotalDelay
  183 0000008A FBB0 F0F3       UDIV             R0, R3      ;Divide the total d
                                                            elay by the frequen
                                                            cy.
  184 0000008E FB00 F002       MUL              R0, R0, R2
  185 00000092 F04F 0164       MOV              R1, #100
  186 00000096 FBB0 F0F1       UDIV             R0, R1      ;The total ON delay
                                                             is the number of c
                                                            lock cycles for tha
                                                            t frequency multipl
                                                            ied by the duty cyc
                                                            le/100 (if R2 = 20,
                                                             then it is 20/100 
                                                            = 20% duty cycle).
  187 0000009A F000 F819       BL               Delay
  188 0000009E         
  189 0000009E         ;Otherwise, turn LED off.
  190 0000009E         
  191 0000009E 2A64            CMP              R2, #100
  192 000000A0 D013            BEQ              returnFromToggle ;When R2 = 5, 
                                                            the LED should NEVE
                                                            R turn off.
  193 000000A2         
  194 000000A2 4823    turnLEDOff
                               LDR              R0, =GPIO_PORTE_DATA_R
  195 000000A4 7801            LDRB             R1, [R0]
  196 000000A6 F001 01FE       AND              R1, R1, #0xFE ;Turn LED Off.
  197 000000AA 7001            STRB             R1, [R0]
  198 000000AC         
  199 000000AC 4821            LDR              R0, =TotalDelay
  200 000000AE FBB0 F0F3       UDIV             R0, R3      ;Divide total delay
                                                             by the frequency.
  201 000000B2         ;The time the LED is on is (100-R2)% of the time.
  202 000000B2 F04F 0164       MOV              R1, #100
  203 000000B6 EBA1 0102       SUB              R1, R1, R2  ;Off = 100 - on. R1
                                                             = 100 - on = off
  204 000000BA FB00 F001       MUL              R0, R0, R1
  205 000000BE F04F 0164       MOV              R1, #100
  206 000000C2 FBB0 F0F1       UDIV             R0, R1      ;Once I get the val



ARM Macro Assembler    Page 7 


                                                            ue off, it's percen
                                                            tage is what I need
                                                             for the LED to be 
                                                            off. So, 80 corresp
                                                            onds to 0.8, or 80%
                                                            .
  207 000000C6 F000 F803       BL               Delay
  208 000000CA         
  209 000000CA E8BD 4007 
                       returnFromToggle
                               POP              {R0, R1, R2, LR}
  210 000000CE 4770            BX               LR
  211 000000D0         
  212 000000D0         ;_______________________________________________________
                       ________________________________________________________
                       ________________________________________________________
                       _
  213 000000D0         
  214 000000D0         Delay                                ;Subroutine to take
                                                             what is in R0 as t
                                                            he value I want to 
                                                            count down from.
  215 000000D0 B501            PUSH             {R0, LR}
  216 000000D2 1E40    subtract
                               SUBS             R0, R0, #1
  217 000000D4 DCFD            BGT              subtract    ;R0 is a signed num
                                                            ber. If it is 0 and
                                                             I subtract 1 to ge
                                                            t 0xFFFFFFFF, I wan
                                                            t it to be -1 and b
                                                            reak out of the loo
                                                            p.
  218 000000D6 E8BD 4001       POP              {R0, LR}
  219 000000DA 4770            BX               LR
  220 000000DC         
  221 000000DC         ;_______________________________________________________
                       ________________________________________________________
                       ________________________________________________________
                       _
  222 000000DC         
  223 000000DC         checkSwitchState                     ;Subroutine to chec
                                                            k if the switch has
                                                             been pressed and r
                                                            eleased. If R4= 0, 
                                                            check switch state 
                                                            to see if it is 1. 
                                                            If it is, the switc
                                                            h has been
  224 000000DC         ;pressed, so change R4 to a 1. If R3 is a 1, check switc
                       h state to see if it is a 0. If it is, the switch has be
                       en released, so R2 = (R2 + 1)%6, and R4 = 0.
  225 000000DC         
  226 000000DC B501            PUSH             {R0, LR}
  227 000000DE 4814            LDR              R0, =GPIO_PORTE_DATA_R
  228 000000E0 7800            LDRB             R0, [R0]    ;Now, R0 has the da
                                                            ta of port E. I am 
                                                            not storing back to
                                                             the data register 
                                                            here, so I can over



ARM Macro Assembler    Page 8 


                                                            ride R0.
  229 000000E2 F000 0002       AND              R0, R0, #0x02 ;Preserve only th
                                                            e switch's bit. If 
                                                            this is 0, the swit
                                                            ch is not pressed. 
                                                            If it is 1, it is p
                                                            ressed.
  230 000000E6 EA4F 0050       LSR              R0, #1
  231 000000EA         
  232 000000EA 2C00            CMP              R4, #0
  233 000000EC D00B            BEQ              ChangeR4    ;If R4 = 0, I am no
                                                            t changing the LED'
                                                            s duty cycle since 
                                                            the button has not 
                                                            yet been pushed for
                                                             it to be released.
                                                            
  234 000000EE         
  235 000000EE         ;Otherwise, R4 is a 1. If R0 = 0, that means the switch 
                       has changes states from 1 (pressed) to 0 (released). Go 
                       to the next duty cycle.
  236 000000EE         
  237 000000EE 2800            CMP              R0, #0      ;If R0 = 0 (and her
                                                            e, the previous bra
                                                            nch failed, so R3 =
                                                             1), the button has
                                                             been released.
  238 000000F0 D000            BEQ              buttonReleased
  239 000000F2 E008            B                ChangeR4
  240 000000F4         
  241 000000F4 F102 0214 
                       buttonReleased
                               ADD              R2, R2, #20
  242 000000F8 2A65            CMP              R2, #101    ;R2 is an unsigned 
                                                            value (percentage c
                                                            an't be negative)
  243 000000FA D202            BHS              setR2BackTo0 ;There is no modul
                                                            os operator in ARM,
                                                             so instead, if R2 
                                                            + 1 > 100, set it b
                                                            ack to 0 since ther
                                                            e is no duty cycle 
                                                            greater than 100%.
  244 000000FC F7FF FFBC       BL               toggleLED   ;Once the button wa
                                                            s releassed, toggle
                                                             the LED on. The to
                                                            ggleLED subroutine 
                                                            saves R0 onto the s
                                                            tack, so when I do 
                                                            MOV R3, R0 later on
                                                            , it is okay.
  245 00000100 E001            B                ChangeR4    ;So, if R2 = 120, i
                                                            t was previously 10
                                                            0%, so go to 0% (of
                                                            f). Otherwise, togg
                                                            le the LED and then
                                                             set R4 back to 0.
  246 00000102         
  247 00000102 F04F 0200 



ARM Macro Assembler    Page 9 


                       setR2BackTo0
                               MOV              R2, #0
  248 00000106         
  249 00000106         ;If R3 is 0, the button has not yet been pressed, so all
                        I am doing is checking to see if it has been pressed, t
                       hen putting 1 into R3 if it has. That is why I did an 
  250 00000106         ;LSR R0, #1. Since the button is bit 1 in Port E's Data 
                       Register, shifting it over 1 to the right means R0 is ei
                       ther 1 or 0. So, all I do is R3 = R0 in this case.
  251 00000106         
  252 00000106 4604    ChangeR4
                               MOV              R4, R0      ;Now, R4 = R0.
  253 00000108 E8BD 4001       POP              {R0, LR}
  254 0000010C 4770            BX               LR
  255 0000010E         
  256 0000010E         ;    R4   R0    (change made? 0 = no changes, 1 = duty c
                       ycle changed).
  257 0000010E         ;  0    0  0
  258 0000010E         ;  0    1  0  Button was pressed, so change R4 = 1
  259 0000010E         ;  1    0  1  (if the button gets released, change duty 
                       cycle, then R4 = 0)
  260 0000010E         ;  1    1  0
  261 0000010E         
  262 0000010E         ;In any case, R4 = R0 at the end. If the button was just
                        pressed (R0 = 1), I want R4 = 1 so I can tell if the bu
                       tton was released. If the button was released (R0 = 0),
  263 0000010E         ;I want R3 = 0 so I don't change the duty cycle again fr
                       om just 1 button press. In any case, I will do R3 = R0, 
                       but it just so happens that if R4 = R0, this does
  264 0000010E         ;not change the value of R4. So, ChangeR3 will be execut
                       ed every time.
  265 0000010E         
  266 0000010E 00 00           ALIGN
  267 00000110         
  268 00000110         ;_______________________________________________________
                       ________________________________________________________
                       ________________________________________________________
                       _
  269 00000110         
  270 00000110         
  271 00000110                 END                          ; end of file
              400FE608 
              4002451C 
              4002551C 
              40024400 
              40025400 
              40024420 
              40025420 
              40025510 
              400243FC 
              01312D00 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 56 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 59 in file main.s
   Uses
      None
Comment: .text unused
ChangeR4 00000106

Symbol: ChangeR4
   Definitions
      At line 252 in file main.s
   Uses
      At line 233 in file main.s
      At line 239 in file main.s
      At line 245 in file main.s

Delay 000000D0

Symbol: Delay
   Definitions
      At line 214 in file main.s
   Uses
      At line 187 in file main.s
      At line 207 in file main.s

Start 00000000

Symbol: Start
   Definitions
      At line 62 in file main.s
   Uses
      At line 61 in file main.s
Comment: Start used once
buttonReleased 000000F4

Symbol: buttonReleased
   Definitions
      At line 241 in file main.s
   Uses
      At line 238 in file main.s
Comment: buttonReleased used once
checkSwitchState 000000DC

Symbol: checkSwitchState
   Definitions
      At line 223 in file main.s
   Uses
      At line 157 in file main.s
Comment: checkSwitchState used once
loop 0000006E

Symbol: loop
   Definitions
      At line 139 in file main.s
   Uses
      At line 159 in file main.s
Comment: loop used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

returnFromToggle 000000CA

Symbol: returnFromToggle
   Definitions
      At line 209 in file main.s
   Uses
      At line 192 in file main.s
Comment: returnFromToggle used once
setR2BackTo0 00000102

Symbol: setR2BackTo0
   Definitions
      At line 247 in file main.s
   Uses
      At line 243 in file main.s
Comment: setR2BackTo0 used once
subtract 000000D2

Symbol: subtract
   Definitions
      At line 216 in file main.s
   Uses
      At line 217 in file main.s
Comment: subtract used once
toggleLED 00000078

Symbol: toggleLED
   Definitions
      At line 165 in file main.s
   Uses
      At line 144 in file main.s
      At line 244 in file main.s

turnLEDOff 000000A2

Symbol: turnLEDOff
   Definitions
      At line 194 in file main.s
   Uses
      At line 171 in file main.s
Comment: turnLEDOff used once
turnLEDOn 0000007E

Symbol: turnLEDOn
   Definitions
      At line 173 in file main.s
   Uses
      None
Comment: turnLEDOn unused
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: GPIO_LOCK_KEY unused
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 112 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 174 in file main.s
      At line 194 in file main.s
      At line 227 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 83 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 97 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 119 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: GPIO_PORTF_CR_R unused
GPIO_PORTF_DATA_R 400253FC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 88 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 105 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: GPIO_PORTF_LOCK_R unused
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 126 in file main.s
Comment: GPIO_PORTF_PUR_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 70 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
TotalDelay 01312D00

Symbol: TotalDelay
   Definitions
      At line 46 in file main.s
   Uses
      At line 182 in file main.s
      At line 199 in file main.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 54 in file main.s
   Uses
      At line 64 in file main.s
Comment: TExaS_Init used once
1 symbol
362 symbols in table
