


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Isaac Feldman and Mina Gawargious
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/9/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal) 
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         
   46 00000000 0007A11C 
                       LEDOnDelay
                               EQU              499996
   47 00000000 0026258C 
                       TotalDelay
                               EQU              2499980     ;I found these valu
                                                            es through calculat
                                                            ions of how many cl
                                                            ock cycles instruct
                                                            ions take to execut
                                                            e. The LED should i
                                                            nitially
   48 00000000         ;be on for 25 milliseconds for 20% duty cycle, and when 
                       I tested it on the logic analyzer, it came out to around
                        25.6 milliseconds, so the calculations were pretty clos
                       e.
   49 00000000         
   50 00000000         ;Note: I am using R2 as the multiple for the delay that 
                       the LED is on. It starts at 1, so the delay is 499996*1.
                        When PE1 is pressed, it should change to 
   51 00000000         ;2, so the delay is now 2*499996 = 999992 (40% duty cycl
                       e), and so on. This way, when R2 is incremented, it will
                        become R2 = (R2 + 1 )%6. If it changes to 5%6 = 5,
   52 00000000         ;the duty cycle will be 100%. Then it will change to 6%6
                        = 0, and the LED will be off.
   53 00000000         
   54 00000000         



ARM Macro Assembler    Page 3 


   55 00000000                 IMPORT           TExaS_Init
   56 00000000                 THUMB
   57 00000000                 AREA             DATA, ALIGN=2
   58 00000000         ;global variables go here
   59 00000000         
   60 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   61 00000000                 THUMB
   62 00000000                 EXPORT           Start
   63 00000000         Start
   64 00000000         ; TExaS_Init sets bus clock at 80 MHz
   65 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   66 00000004         ; Initialization goes here
   67 00000004         
   68 00000004         ;So, I will use Port E Pins 0 and 1, and Port F pin 4. S
                       ince I am not using Port F pin 0, I need not unlock anyt
                       hing.
   69 00000004         
   70 00000004         ;Start clocks for ports E and F
   71 00000004 4824            LDR              R0, = SYSCTL_RCGCGPIO_R
   72 00000006 7801            LDRB             R1, [R0]
   73 00000008 F041 0130       ORR              R1, R1, #0x30 ;SYSCTL_RCGCGPIO_
                                                            R = xxFEDCBA, so to
                                                             enable E and F, I 
                                                            need to ORR it with
                                                             0x30.
   74 0000000C 7001            STRB             R1, [R0]
   75 0000000E BF00            NOP
   76 00000010 BF00            NOP
   77 00000012 BF00            NOP
   78 00000014 BF00            NOP
   79 00000016         
   80 00000016         ;If I need to unlock port F, put it here, but since I am
                        using switch 1 and not switch 2 (which is pin 0), I do 
                       not think an unlock is necessary.
   81 00000016         
   82 00000016         ;Now, I need to digitally enable all the pins I am using
                       .
   83 00000016         
   84 00000016 4821            LDR              R0, =GPIO_PORTE_DEN_R
   85 00000018 7801            LDRB             R1, [R0]
   86 0000001A F041 0103       ORR              R1, R1, #0x03 ;Digitally enable
                                                             pins 0 and 1.
   87 0000001E 7001            STRB             R1, [R0]
   88 00000020         
   89 00000020 481F            LDR              R0, =GPIO_PORTF_DEN_R
   90 00000022 7801            LDRB             R1, [R0]
   91 00000024 F041 0110       ORR              R1, R1, #0x10 ;Digitally enable
                                                             pin 4.
   92 00000028 7001            STRB             R1, [R0]
   93 0000002A         
   94 0000002A         ;Now that the pins I am using are digitally enabled, I a
                       lso need to set the directions of each of the pins as ei
                       ther input or output.
   95 0000002A         
   96 0000002A         ;PE1 and PF4 are both inputs (0), and PE0 is an output (
                       1). Remember that for some reason, 0 is input and 1 is o
                       utput.



ARM Macro Assembler    Page 4 


   97 0000002A         
   98 0000002A 481E            LDR              R0, =GPIO_PORTE_DIR_R
   99 0000002C 7801            LDRB             R1, [R0]
  100 0000002E F041 0101       ORR              R1, R1, #0x01 ;PE0 is an output
                                                             (1).
  101 00000032 F001 01FD       AND              R1, R1, #0xFD ;PE1 is input (DI
                                                            R = 76543210)
  102 00000036 7001            STRB             R1, [R0]
  103 00000038         
  104 00000038         ;Now Port F
  105 00000038         
  106 00000038 481B            LDR              R0, =GPIO_PORTF_DIR_R
  107 0000003A 7801            LDRB             R1, [R0]
  108 0000003C F001 01EF       AND              R1, R1, #0xEF ;Set pin 4 to inp
                                                            ut (0)
  109 00000040 7001            STRB             R1, [R0]
  110 00000042         
  111 00000042         ;Now, I need to disable alternate funtions.
  112 00000042         
  113 00000042 481A            LDR              R0, =GPIO_PORTE_AFSEL_R ;R0 = a
                                                            ddress of Alternate
                                                             Function SELect re
                                                            gister.
  114 00000044 7801            LDRB             R1, [R0]
  115 00000046 F001 01FC       AND              R1, #0xFC   ;Turn off alternate
                                                             functions for pins
                                                             0 and 1 for portE.
                                                            
  116 0000004A 7001            STRB             R1, [R0]
  117 0000004C         
  118 0000004C         ;Now to disable Port F's alternate functions.
  119 0000004C         
  120 0000004C 4818            LDR              R0, =GPIO_PORTF_AFSEL_R
  121 0000004E 7801            LDRB             R1, [R0]
  122 00000050 F001 01EF       AND              R1, #0xEF   ;I am only using pi
                                                            n 4, so I need to d
                                                            isable alternate fu
                                                            nctions just for pi
                                                            n 4.
  123 00000054 7001            STRB             R1, [R0]
  124 00000056         
  125 00000056         ;Now, I need to enable the pull-up resistor for the nega
                       tive-logic switch in Port F
  126 00000056         
  127 00000056 4817            LDR              R0, =GPIO_PORTF_PUR_R
  128 00000058 7801            LDRB             R1, [R0]
  129 0000005A F041 0110       ORR              R1, #0x10   ;I am using switch 
                                                            1 on pin 4, so I ne
                                                            ed to enable its pu
                                                            ll-up resistor.
  130 0000005E 7001            STRB             R1, [R0]
  131 00000060         
  132 00000060 F04F 0200       MOV              R2, #0      ;LED should start a
                                                            t 20% duty cycle.
  133 00000064         
  134 00000064 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  135 00000066         



ARM Macro Assembler    Page 5 


  136 00000066         
  137 00000066         loop
  138 00000066         ; main engine goes here
  139 00000066         
  140 00000066         ;Initially turn the LED on.
  141 00000066         
  142 00000066 4814    turnLEDOn
                               LDR              R0, =GPIO_PORTE_DATA_R
  143 00000068 7801            LDRB             R1, [R0]
  144 0000006A F041 0101       ORR              R1, R1, #0x01 ;LED output on.
  145 0000006E 7001            STRB             R1, [R0]
  146 00000070         
  147 00000070 4812            LDR              R0, =LEDOnDelay ;R2 is the dela
                                                            y for the LED to be
                                                             on.
  148 00000072 FB00 F002       MUL              R0, R0, R2
  149 00000076 1E40    subtractOn
                               SUBS             R0, R0, #1
  150 00000078 DCFD            BGT              subtractOn  ;If R0 is not 0, br
                                                            anch to subtractOn.
                                                            
  151 0000007A         
  152 0000007A         ;Otherwise, turn LED off.
  153 0000007A         
  154 0000007A 480F    turnLEDOff
                               LDR              R0, =GPIO_PORTE_DATA_R
  155 0000007C 7801            LDRB             R1, [R0]
  156 0000007E F001 01FE       AND              R1, R1, #0xFE ;Turn LED Off.
  157 00000082 7001            STRB             R1, [R0]
  158 00000084         
  159 00000084 480E            LDR              R0, =TotalDelay
  160 00000086 490D            LDR              R1, =LEDOnDelay
  161 00000088 FB01 F102       MUL              R1, R1, R2
  162 0000008C EBA0 0001       SUB              R0, R0, R1  ;The total delay - 
                                                            delay for LED to be
                                                             on = dealy for LED
                                                             to be off.
  163 00000090 1E40    subtractOff
                               SUBS             R0, R0, #1
  164 00000092 DCFD            BGT              subtractOff ;If R0 is not 0, br
                                                            anch to subtract.
  165 00000094         
  166 00000094         ;The 20% duty cycle corresponds to a delay of 499996 (su
                       btracting 1 from this value a bunch of times until it is
                        0 makes the LED on for 20% of the duty cycle).
  167 00000094         ;When PE1 is pressed AND released, I want R2 = (R2 + 1)%
                       6, so it goes from 20% to 40 to 60 to 80 to 100 to 0.
  168 00000094         
  169 00000094         ;For an 8Hz LED cycle with a 80MHz microcontroller clock
                       , I need 10MHz between setting thee LED on the first tim
                       e and setting it on the second time.
  170 00000094         
  171 00000094         ;With a 20% duty cycle, I wait 2 million cycles while it
                       's on, then at the end of those 2 million cycles, the re
                       st of the 8 million, it is off.
  172 00000094         
  173 00000094         
  174 00000094         
  175 00000094 E7E7            B                loop



ARM Macro Assembler    Page 6 


  176 00000096         
  177 00000096 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  178 00000098                 END                          ; end of file
              400FE608 
              4002451C 
              4002551C 
              40024400 
              40025400 
              40024420 
              40025420 
              40025510 
              400243FC 
              0007A11C 
              0026258C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 57 in file main.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 60 in file main.s
   Uses
      None
Comment: .text unused
Start 00000000

Symbol: Start
   Definitions
      At line 63 in file main.s
   Uses
      At line 62 in file main.s
Comment: Start used once
loop 00000066

Symbol: loop
   Definitions
      At line 137 in file main.s
   Uses
      At line 175 in file main.s
Comment: loop used once
subtractOff 00000090

Symbol: subtractOff
   Definitions
      At line 163 in file main.s
   Uses
      At line 164 in file main.s
Comment: subtractOff used once
subtractOn 00000076

Symbol: subtractOn
   Definitions
      At line 149 in file main.s
   Uses
      At line 150 in file main.s
Comment: subtractOn used once
turnLEDOff 0000007A

Symbol: turnLEDOff
   Definitions
      At line 154 in file main.s
   Uses
      None
Comment: turnLEDOff unused
turnLEDOn 00000066

Symbol: turnLEDOn
   Definitions
      At line 142 in file main.s
   Uses
      None
Comment: turnLEDOn unused
7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: GPIO_LOCK_KEY unused
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 113 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 142 in file main.s
      At line 154 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 84 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 98 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 120 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: GPIO_PORTF_CR_R unused
GPIO_PORTF_DATA_R 400253FC




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: GPIO_PORTF_DATA_R unused
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 89 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 106 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      None
Comment: GPIO_PORTF_LOCK_R unused
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 127 in file main.s
Comment: GPIO_PORTF_PUR_R used once
LEDOnDelay 0007A11C

Symbol: LEDOnDelay
   Definitions
      At line 46 in file main.s
   Uses
      At line 147 in file main.s
      At line 160 in file main.s

SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 71 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
TotalDelay 0026258C

Symbol: TotalDelay
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 47 in file main.s
   Uses
      At line 159 in file main.s
Comment: TotalDelay used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 55 in file main.s
   Uses
      At line 65 in file main.s
Comment: TExaS_Init used once
1 symbol
357 symbols in table
